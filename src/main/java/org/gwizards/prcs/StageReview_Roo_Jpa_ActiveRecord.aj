// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.gwizards.prcs;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.gwizards.prcs.StageReview;
import org.springframework.transaction.annotation.Transactional;

privileged aspect StageReview_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager StageReview.entityManager;
    
    public static final List<String> StageReview.fieldNames4OrderClauseFilter = java.util.Arrays.asList("");
    
    public static final EntityManager StageReview.entityManager() {
        EntityManager em = new StageReview().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long StageReview.countStageReviews() {
        return entityManager().createQuery("SELECT COUNT(o) FROM StageReview o", Long.class).getSingleResult();
    }
    
    public static List<StageReview> StageReview.findAllStageReviews() {
        return entityManager().createQuery("SELECT o FROM StageReview o", StageReview.class).getResultList();
    }
    
    public static List<StageReview> StageReview.findAllStageReviews(String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM StageReview o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, StageReview.class).getResultList();
    }
    
    public static StageReview StageReview.findStageReview(Integer stageReviewNo) {
        if (stageReviewNo == null) return null;
        return entityManager().find(StageReview.class, stageReviewNo);
    }
    
    public static List<StageReview> StageReview.findStageReviewEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM StageReview o", StageReview.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    public static List<StageReview> StageReview.findStageReviewEntries(int firstResult, int maxResults, String sortFieldName, String sortOrder) {
        String jpaQuery = "SELECT o FROM StageReview o";
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            jpaQuery = jpaQuery + " ORDER BY " + sortFieldName;
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                jpaQuery = jpaQuery + " " + sortOrder;
            }
        }
        return entityManager().createQuery(jpaQuery, StageReview.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void StageReview.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void StageReview.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            StageReview attached = StageReview.findStageReview(this.stageReviewNo);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void StageReview.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void StageReview.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public StageReview StageReview.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        StageReview merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
