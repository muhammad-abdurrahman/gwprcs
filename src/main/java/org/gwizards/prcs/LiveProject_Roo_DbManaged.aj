// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.gwizards.prcs;

import java.math.BigDecimal;
import java.util.Date;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;
import org.gwizards.prcs.Invoice;
import org.gwizards.prcs.LeadFollowup;
import org.gwizards.prcs.LiveProject;
import org.gwizards.prcs.ProjectFinance;
import org.gwizards.prcs.ProjectReview;
import org.gwizards.prcs.ProjectStatusType;
import org.gwizards.prcs.ProjectType;
import org.gwizards.prcs.StaffProject;
import org.gwizards.prcs.StudentProject;
import org.gwizards.prcs.StudentProjectReview;
import org.springframework.format.annotation.DateTimeFormat;

privileged aspect LiveProject_Roo_DbManaged {
    
    @OneToOne(mappedBy = "liveProject")
    private ProjectReview LiveProject.projectReview;
    
    @OneToMany(mappedBy = "liveProjectNo")
    private Set<Invoice> LiveProject.invoices;
    
    @OneToMany(mappedBy = "liveProjectNo")
    private Set<StaffProject> LiveProject.staffProjects;
    
    @OneToMany(mappedBy = "liveProjectNo")
    private Set<StudentProject> LiveProject.studentProjects;
    
    @OneToMany(mappedBy = "liveProjectNo")
    private Set<StudentProjectReview> LiveProject.studentProjectReviews;
    
    @ManyToOne
    @JoinColumn(name = "lead_followup_no", referencedColumnName = "lead_followup_no", nullable = false)
    private LeadFollowup LiveProject.leadFollowupNo;
    
    @ManyToOne
    @JoinColumn(name = "project_type_no", referencedColumnName = "project_type_no", nullable = false)
    private ProjectType LiveProject.projectTypeNo;
    
    @ManyToOne
    @JoinColumn(name = "project_status_no", referencedColumnName = "project_status_no", nullable = false)
    private ProjectStatusType LiveProject.projectStatusNo;
    
    @ManyToOne
    @JoinColumn(name = "project_fin_no", referencedColumnName = "project_finance_no", nullable = false)
    private ProjectFinance LiveProject.projectFinNo;
    
    @Column(name = "project_short_name", columnDefinition = "VARCHAR", length = 255)
    @NotNull
    private String LiveProject.projectShortName;
    
    @Column(name = "project_total_cost", columnDefinition = "DECIMAL", precision = 9, scale = 2)
    private BigDecimal LiveProject.projectTotalCost;
    
    @Column(name = "project_total_outstanding", columnDefinition = "VARCHAR", length = 45)
    private String LiveProject.projectTotalOutstanding;
    
    @Column(name = "project_start", columnDefinition = "DATE")
    @Temporal(TemporalType.DATE)
    @DateTimeFormat(style = "M-")
    private Date LiveProject.projectStart;
    
    @Column(name = "project_end", columnDefinition = "DATE")
    @Temporal(TemporalType.DATE)
    @DateTimeFormat(style = "M-")
    private Date LiveProject.projectEnd;
    
    public ProjectReview LiveProject.getProjectReview() {
        return projectReview;
    }
    
    public void LiveProject.setProjectReview(ProjectReview projectReview) {
        this.projectReview = projectReview;
    }
    
    public Set<Invoice> LiveProject.getInvoices() {
        return invoices;
    }
    
    public void LiveProject.setInvoices(Set<Invoice> invoices) {
        this.invoices = invoices;
    }
    
    public Set<StaffProject> LiveProject.getStaffProjects() {
        return staffProjects;
    }
    
    public void LiveProject.setStaffProjects(Set<StaffProject> staffProjects) {
        this.staffProjects = staffProjects;
    }
    
    public Set<StudentProject> LiveProject.getStudentProjects() {
        return studentProjects;
    }
    
    public void LiveProject.setStudentProjects(Set<StudentProject> studentProjects) {
        this.studentProjects = studentProjects;
    }
    
    public Set<StudentProjectReview> LiveProject.getStudentProjectReviews() {
        return studentProjectReviews;
    }
    
    public void LiveProject.setStudentProjectReviews(Set<StudentProjectReview> studentProjectReviews) {
        this.studentProjectReviews = studentProjectReviews;
    }
    
    public LeadFollowup LiveProject.getLeadFollowupNo() {
        return leadFollowupNo;
    }
    
    public void LiveProject.setLeadFollowupNo(LeadFollowup leadFollowupNo) {
        this.leadFollowupNo = leadFollowupNo;
    }
    
    public ProjectType LiveProject.getProjectTypeNo() {
        return projectTypeNo;
    }
    
    public void LiveProject.setProjectTypeNo(ProjectType projectTypeNo) {
        this.projectTypeNo = projectTypeNo;
    }
    
    public ProjectStatusType LiveProject.getProjectStatusNo() {
        return projectStatusNo;
    }
    
    public void LiveProject.setProjectStatusNo(ProjectStatusType projectStatusNo) {
        this.projectStatusNo = projectStatusNo;
    }
    
    public ProjectFinance LiveProject.getProjectFinNo() {
        return projectFinNo;
    }
    
    public void LiveProject.setProjectFinNo(ProjectFinance projectFinNo) {
        this.projectFinNo = projectFinNo;
    }
    
    public String LiveProject.getProjectShortName() {
        return projectShortName;
    }
    
    public void LiveProject.setProjectShortName(String projectShortName) {
        this.projectShortName = projectShortName;
    }
    
    public BigDecimal LiveProject.getProjectTotalCost() {
        return projectTotalCost;
    }
    
    public void LiveProject.setProjectTotalCost(BigDecimal projectTotalCost) {
        this.projectTotalCost = projectTotalCost;
    }
    
    public String LiveProject.getProjectTotalOutstanding() {
        return projectTotalOutstanding;
    }
    
    public void LiveProject.setProjectTotalOutstanding(String projectTotalOutstanding) {
        this.projectTotalOutstanding = projectTotalOutstanding;
    }
    
    public Date LiveProject.getProjectStart() {
        return projectStart;
    }
    
    public void LiveProject.setProjectStart(Date projectStart) {
        this.projectStart = projectStart;
    }
    
    public Date LiveProject.getProjectEnd() {
        return projectEnd;
    }
    
    public void LiveProject.setProjectEnd(Date projectEnd) {
        this.projectEnd = projectEnd;
    }
    
}
